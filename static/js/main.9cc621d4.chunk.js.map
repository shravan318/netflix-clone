{"version":3,"sources":["trailer.js","axios.js","genres.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetch","apiKey","toUrl","videoId","encodeURI","movie","options","cb","legacy","opts","multi","id","year","language","Error","Object","assign","response","getMovieId","search","url","method","then","res","json","err","Promise","reject","message","status_message","results","length","catch","error","movieId","endpoint","map","result","key","Array","from","Set","getTrailer","cx","require","instance","default","create","baseURL","genres","Row","props","useState","movies","setMovies","setMovie","trailerUrl","setTrailerUrl","useEffect","a","get","fetchUrl","request","data","fetchData","onHoverPlayVideo","movieTrailer","original_name","urlParams","URLSearchParams","URL","console","log","className","title","isVertical","src","poster_path","backdrop_path","alt","name","onClick","vote_average","popularity","overview","genre_ids","genre","height","width","playerVars","autoplay","APIkey","requests","fetchNetflixOriginals","fetchNetflixTopAction","fetchNetflixTopComedy","fetchNetflixTopCrime","fetchNetflixTopDrama","fetchNetflixTopFamily","fetchNetflixTopAnimation","fetchNetflixTopKids","fetchNetflixTopMystery","fetchNetflixTopSciFi","fetchNetflixTopSoap","fetchNetflixTopTalk","fetchNetflixTopWar","fetchNetflixTopWestern","Banner","Math","floor","random","style","backgroundSize","backgroundImage","Nav","show","navBG","window","addEventListener","scrollY","href","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cc621d4.chunk.js","sourcesContent":["'use strict';\r\n\r\n( function ( root, cx ) {\r\n\r\n\t if ( typeof exports === 'object' ) {\r\n\r\n\t\t// Node, CommonJS-like\r\n\t\tmodule.exports = cx( require( 'isomorphic-fetch' ) )\r\n\r\n\t} else {\r\n\r\n\t\t// Browser globals (root is window)\r\n\t\troot.movieTrailer = cx( root.fetch )\r\n\r\n\t}\r\n\r\n} )( this, function ( fetch ) {\r\n\r\n\t// Public Key on purpose\r\n\tconst apiKey = '9d2bff12ed955c7f1f74b83187f188ae'\r\n\r\n\tfunction toUrl ( videoId ) {\r\n\r\n\t\treturn encodeURI( 'https://www.youtube.com/watch?v=' + videoId )\r\n\r\n\t}\r\n\r\n\tfunction getMovieId ( search, year, language ) {\r\n\r\n\t\t/* Fetch a Movie ID for querying the TMDB API */\r\n\r\n\t\tconst url = 'https://api.themoviedb.org' + encodeURI( '/3/search/tv?api_key=' + apiKey + '&query=' + search + ( ( year !== null ) ? '&year=' + year : '' ) + ( ( language !== null ) ? '&language=' + language : '' ) )\r\n\r\n\t\tconst response = fetch( url, {\r\n\t\t\tmethod: 'GET'\r\n\t\t} )\r\n\t\t\t.then(\r\n\t\t\t\tres => res.json(),\r\n\t\t\t\terr => Promise.reject( err.message ) )\r\n\t\t\t.then( json => {\r\n\r\n\t\t\t\tif ( typeof ( json.status_message ) !== 'undefined' ) {\r\n\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\treturn Promise.reject( new Error( `JSON - ${json.status_message}` ) )\r\n\r\n\t\t\t\t} else if ( json.results.length === 0 ) {\r\n\r\n\t\t\t\t\t// Retry failed search without year\r\n\t\t\t\t\tif ( year !== null ) {\r\n\r\n\t\t\t\t\t\tgetMovieId( search, null, language )\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// Error\r\n\t\t\t\t\t\treturn Promise.reject( new Error( 'API - No results found' ) )\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn json.results[0].id\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.catch( error => error )\r\n\r\n\t\treturn response\r\n\r\n\t}\r\n\r\n\tfunction getTrailer ( movieId, multi, videoId, language ) {\r\n\r\n\t\t/* Fetch single or multiple movie trailers via the TMDB API */\r\n\t\tconst endpoint = 'https://api.themoviedb.org' + encodeURI( '/3/tv/' + movieId + '/videos?api_key=' + apiKey + ( ( language !== null ) ? '&language=' + language : '' ) )\r\n\t\tconst response = fetch( endpoint, {\r\n\t\t\tmethod: 'GET'\r\n\t\t} )\r\n\t\t\t.then(\r\n\t\t\t\tres => res.json(),\r\n\t\t\t\terr => Promise.reject( err.message )\r\n\t\t\t)\r\n\t\t\t.then( json => {\r\n\r\n\t\t\t\tif ( typeof ( json.status_message ) !== 'undefined' ) {\r\n\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\treturn Promise.reject( new Error( `JSON - ${json.status_message}` ) )\r\n\r\n\t\t\t\t} else if ( json.results.length === 0 ) {\r\n\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\treturn Promise.reject( new Error( 'API - No results found' ) )\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet results = json.results\r\n\r\n\t\t\t\t// Strip all but videoId\r\n\t\t\t\tresults = results.map( result => {\r\n\r\n\t\t\t\t\treturn result.key\r\n\r\n\t\t\t\t} )\r\n\r\n\t\t\t\tif ( !videoId ) {\r\n\r\n\t\t\t\t\t// Return Youtube videoID or full `Watch` URL\r\n\t\t\t\t\tresults = results.map( toUrl )\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( multi ) {\r\n\r\n\t\t\t\t\t// Return *unique* urls\r\n\t\t\t\t\treturn Array.from( new Set( results ) )\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn results[0]\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\r\n\t\treturn response\r\n\r\n\t}\r\n\r\n\tfunction movieTrailer ( movie, options, cb, legacy ) {\r\n\r\n\t\t/* Fetch movie trailers */\r\n\r\n\t\t// Massage inputs\r\n\t\tlet opts = {\r\n\t\t\tmulti: false,\r\n\t\t\tid: false,\r\n\t\t\tyear: null,\r\n\t\t\tlanguage: null\r\n\t\t}\r\n\r\n\t\tif ( typeof movie !== 'string' ) {\r\n\r\n\t\t\tthrow new Error( 'Expected first parameter to be a movie (string)' )\r\n\r\n\t\t} else if ( typeof options === 'function' ) {\r\n\r\n\t\t\t// Second parameter is the callback\r\n\t\t\tcb = options\r\n\t\t\toptions = null\r\n\r\n\t\t} else if ( typeof options === 'boolean' || options === 'true' ) {\r\n\r\n\t\t\t// Second parameter is multi\r\n\t\t\topts.multi = options\r\n\r\n\t\t} else if ( typeof options === 'string' || typeof options === 'number' ) {\r\n\r\n\t\t\t// Second parameter is year\r\n\t\t\topts.year = options\r\n\r\n\t\t\t/* BACKWARDS-COMPATABILITY FOR v1 */\r\n\t\t\tif ( typeof legacy === 'function' && ( typeof cb === 'boolean' || ( typeof cb === 'string' && cb === 'true' ) ) ) {\r\n\r\n\t\t\t\t// Third parameter is multi\r\n\t\t\t\topts.multi = cb\r\n\t\t\t\tcb = legacy\r\n\r\n\t\t\t}\r\n\t\t\t/* END BACKWARDS-COMPATABILITY */\r\n\r\n\t\t} else if ( typeof options === 'object' ) {\r\n\r\n\t\t\t// Set options\r\n\t\t\topts = Object.assign( opts, options )\r\n\r\n\t\t}\r\n\r\n\t\t// Remove invalid callback\r\n\t\tif ( typeof cb !== 'function' ) cb = null\r\n\r\n\t\tconst response = getMovieId( movie, opts.year, opts.language )\r\n\t\t\t.then( movieId => {\r\n\r\n\t\t\t\treturn getTrailer( movieId, opts.multi, opts.id, opts.language )\r\n\r\n\t\t\t} )\r\n\r\n\t\t// Callback\r\n\t\tif ( cb ) {\r\n\r\n\t\t\treturn response.then( res => cb( null, res ), err => cb( err, null ) )\r\n\r\n\t\t}\r\n\r\n\t\t// Promise\r\n\t\treturn response\r\n\r\n\t}\r\n\r\n\t// Exposed public method\r\n\treturn movieTrailer\r\n\r\n} )","const { default: axios } = require(\"axios\");\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n  });\r\n\r\nexport default instance\r\n","const genres = \r\n  {\r\n    \"10759\": \"Action & Adventure\",\r\n\r\n    \"16\": \"Animation\",\r\n \r\n    \"35\": \"Comedy\",\r\n \r\n    \"80\": \"Crime\",\r\n \r\n    \"99\": \"Documentary\",\r\n \r\n    \"18\": \"Drama\",\r\n \r\n    \"10751\": \"Family\",  \r\n \r\n    \"10762\": \"Kids\",\r\n \r\n    \"9648\": \"Mystery\",\r\n \r\n    \"10763\": \"News\",\r\n \r\n    \"10764\": \"Reality\",\r\n \r\n    \"10765\": \"Sci-Fi & Fantasy\",\r\n \r\n    \"10766\": \"Soap\",\r\n \r\n    \"10767\": \"Talk\",\r\n \r\n    \"10768\": \"War & Politics\",\r\n \r\n    \"37\": \"Western\",\r\n  }\r\n  export default genres","import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"./trailer\";\r\nimport instance from \"./axios\";\r\nimport { BsFillPlayFill } from \"react-icons/bs\";\r\nimport { AiOutlineInfoCircle,AiOutlineClose } from \"react-icons/ai\";\r\nimport genre from \"./genres\";\r\nimport \"./Row.css\";\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row(props) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [movie, setMovie] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(false);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await instance.get(props.fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [props.fetchUrl]);\r\n  const opts = {\r\n    height: \"600\",\r\n    width: \"1000\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const onHoverPlayVideo = (movie) => {\r\n    setMovie(movie);\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.original_name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          console.log(\"urlParams\", urlParams.get(\"v\"));\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  console.log(\"object\", movie);\r\n  return (\r\n    <div className=\"Row__container\">\r\n      <h2 className=\"genre__heading\">{props.title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => {\r\n          return (\r\n            <img\r\n              key={movie.id}\r\n              className={\r\n                props.isVertical\r\n                  ? \"row__poster--vertical\"\r\n                  : \"row__poster--horizontal\"\r\n              }\r\n              src={`${baseUrl}${\r\n                props.isVertical ? movie.poster_path : movie.backdrop_path\r\n              } `}\r\n              alt={movie.name}\r\n              onClick={() => onHoverPlayVideo(movie)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {trailerUrl && (\r\n        <div className=\"trailer__wrapper\">\r\n          <div className=\"trailer__bleed\"></div>\r\n          <div className=\"trailer__contents\">\r\n            <div className=\"trailer__name\">{movie.name}</div>\r\n            <div className=\"trailer__spans\">\r\n              <span className=\"trailer__ratings\">\r\n                Rating : {movie.vote_average}\r\n              </span>\r\n              <span className=\"trailer__ratings\">\r\n                Popularity : {movie.popularity} %\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"trailer__buttons\">\r\n              <button className=\"trailer__button--white\">\r\n                <BsFillPlayFill className=\"trailer__icon--play\" /> Play\r\n              </button>\r\n              <button className=\"trailer__button--grey\">\r\n                <AiOutlineInfoCircle className=\"trailer__icon--play\" />\r\n                More Info\r\n              </button>\r\n            </div>\r\n            <div className=\"trailer__description\">{movie.overview}</div>\r\n\r\n            <div className=\"trailer__genres\">\r\n              Genre :{\" \"}\r\n              {movie?.genre_ids.map(id => {\r\n                return <span>{genre[id]}, {\" \"}</span>\r\n                \r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"trailerVideo__wrapper\">\r\n              <AiOutlineClose className=\"trailer__icon--close\" onClick={()=>onHoverPlayVideo(movie)} />\r\n            <YouTube videoId={trailerUrl} opts={opts} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const APIkey =\"401d6343c3ba69f553beb8a29a71978e\"\r\n\r\nconst requests = {\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopAction: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10759&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopComedy: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=35&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopCrime: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=80&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopDrama: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=18&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopFamily: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10751&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopAnimation: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=16&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopKids: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10762&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopMystery: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=9648&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopSciFi: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10765&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopSoap: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10766&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopTalk: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10767&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopWar: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=10768&with_networks=213&include_null_first_air_dates=false` ,\r\n    fetchNetflixTopWestern: `/discover/tv?api_key=${APIkey}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=37&with_networks=213&include_null_first_air_dates=false` ,\r\n}\r\nexport default requests","import React, { useState, useEffect } from \"react\";\r\nimport instance from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./banner.css\";\r\nimport { BsFillPlayFill } from \"react-icons/bs\";\r\nimport {AiOutlineInfoCircle} from \"react-icons/ai\"\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState();\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await instance.get(requests.fetchNetflixOriginals);\r\n       setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * (request.data.results.length - 1))\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n    return (\r\n    <header\r\n      className=\"banner__wrapper\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">{movie?.name || movie?.title || movie?.original_name}</h1>\r\n        <h3 className=\"banner__description\">\r\n            {movie?.overview}\r\n        </h3>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button--white\"><BsFillPlayFill className=\"banner__icon--play\"/> Play</button>\r\n          <button className=\"banner__button--grey\"><AiOutlineInfoCircle className=\"banner__icon--play\"/>More Info</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"banner__bleed\"></div>\r\n    </header>\r\n  );\r\n}\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, navBG] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        navBG(true);\r\n      } else navBG(false);\r\n    });\r\n  }, []);\r\n  return (\r\n    <nav className={show === true ? \"nav__wrapper--bg\" : \"nav__wrapper\"}>\r\n      <div className=\"nav__left\">\r\n        <a href=\"/\">\r\n          <img\r\n            src=\"https://logos-download.com/wp-content/uploads/2016/03/Netflix_logo.png\"\r\n            alt=\"logo\"\r\n            className=\"nav__logo\"\r\n          />\r\n        </a>\r\n      </div>\r\n      <div className=\"nav__right\">\r\n        <img\r\n          src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\r\n          alt=\"avatar\"\r\n          className=\"nav__avatar\"\r\n        />\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\"\nimport Nav from \"./Nav\"\n\nfunction App() {\n  return (\n    <div className=\"App__container\">\n      <Nav />\n      <Banner />\n      <div className=\"Row__wrapper\">\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        // isVertical={true}\n      />\n      <Row title=\"Crime - Top Rated\" fetchUrl={requests.fetchNetflixTopCrime} />\n      <Row\n        title=\"Action - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopAction}\n      />\n      <Row\n        title=\"Comedy - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopComedy}\n      />\n      <Row title=\"Drama - Top Rated\" fetchUrl={requests.fetchNetflixTopDrama} />\n      <Row\n        title=\"Family - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopFamily}\n      />\n      <Row\n        title=\"Animation - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopAnimation}\n      />\n      <Row title=\"Kids - Top Rated\" fetchUrl={requests.fetchNetflixTopKids} />\n      <Row\n        title=\"Mystery - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopMystery}\n      />\n      <Row\n        title=\"Sci-fi - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopSciFi}\n      />\n      <Row title=\"Soap - Top Rated\" fetchUrl={requests.fetchNetflixTopSoap} />\n      <Row title=\"Talk - Top Rated\" fetchUrl={requests.fetchNetflixTopTalk} />\n      <Row title=\"War - Top Rated\" fetchUrl={requests.fetchNetflixTopWar} />\n      <Row\n        title=\"Western - Top Rated\"\n        fetchUrl={requests.fetchNetflixTopWestern}\n      />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}